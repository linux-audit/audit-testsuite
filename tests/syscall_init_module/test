#!/usr/bin/perl

use strict;

use Test;
BEGIN { plan tests => 2 }

use File::Temp qw/ tempfile /;

my $basedir = $0;
$basedir =~ s|(.*)/[^/]*|$1|;

###
# functions

sub key_gen {
	my @chars = ("A".."Z", "a".."z");
	my $key = "testsuite-" . time . "-";
	$key .= $chars[rand @chars] for 1..8;
	return $key;
}

###
# setup

# reset audit
system("auditctl -D >& /dev/null");

# create stdout/stderr sinks
(my $fh_out, my $stdout) = tempfile(TEMPLATE => '/tmp/audit-testsuite-out-XXXX',
				    UNLINK => 1);
(my $fh_err, my $stderr) = tempfile(TEMPLATE => '/tmp/audit-testsuite-err-XXXX',
				    UNLINK => 1);

###
# tests

# set the socketcall filter
my $key = key_gen();
# connect
system("auditctl -a always,exit -F arch=b64 -S init_module -S finit_module -k $key");

# run the test
my $name = "arptable_filter";
system("modprobe $name");

system("sleep 5;sync");

# test if we generate any audit records from the filter rule
my $result = system("ausearch -k $key > $stdout 2> $stderr");
ok($result, 0);

# test if we generate the MODULE record
my $line;
my $line2;
my $type;
my $found_name = 0;
while ($line = <$fh_out>) {
	if ($line =~ /^type=UNKNOWN\[1330\] /) {
		if ($line =~ / name=\"$name\"/) {
			$found_name = 1;
		}
	}
}
ok($found_name);

###
# cleanup

system("auditctl -D >& /dev/null");
system("rmmod $name");
