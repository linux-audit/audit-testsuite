#!/usr/bin/perl

use strict;

use Test;
BEGIN { plan tests => 29 }

use File::Temp qw/ tempfile /;

###
# functions

sub key_gen {
    my @chars = ( "A" .. "Z", "a" .. "z" );
    my $key   = "testsuite-" . time . "-";
    $key .= $chars[ rand @chars ] for 1 .. 8;
    return $key;
}

###
# setup

chomp( my $abi_bits = $ENV{MODE} != 0 ? $ENV{MODE} : `getconf LONG_BIT` );

# try to find three test executables
my @execs = ("") x 3;

if ( -x "/usr/bin/id" ) {
    $execs[0] = "/usr/bin/id";
}
elsif ( -x "/bin/id" ) {
    $execs[0] = "/bin/id";
}

if ( -x "/usr/bin/echo" ) {
    $execs[1] = "/usr/bin/echo";
}
elsif ( -x "/bin/echo" ) {
    $execs[1] = "/bin/echo";
}

if ( -x "/usr/bin/ls" ) {
    $execs[2] = "/usr/bin/ls";
}
elsif ( -x "/bin/ls" ) {
    $execs[2] = "/bin/ls";
}

# see if we found the test executables
ok( $execs[0] ne "" and $execs[1] ne "" and $execs[2] ne "" );

# create stdout/stderr sinks
( my $fh_out, my $stdout ) = tempfile(
    TEMPLATE => '/tmp/audit-testsuite-out-XXXX',
    UNLINK   => 1
);
( my $fh_err, my $stderr ) = tempfile(
    TEMPLATE => '/tmp/audit-testsuite-err-XXXX',
    UNLINK   => 1
);

sub do_test {
    my ( $exit, $exclude ) = @_;

    # reset audit
    system("auditctl -D >& /dev/null");

    # set the audit-by-executable filter
    my @expected = (0) x scalar @execs;
    my $key      = key_gen();
    foreach ( @{$exit} ) {
        my $op  = %$_{op};
        my $exe = %$_{exe};
        if ( $op eq "=" ) {
            $expected[$exe] = 1;
        }
        else {
            for ( 0 .. $#execs ) {
                $expected[$_] = 1 if $_ != $exe;
            }
        }
        system( "auditctl -a always,exit -F exe$op$execs[$exe] "
              . "-F arch=b$abi_bits -S exit_group -k $key" );
    }

    # add a universal rule if no exit filters given
    if ( scalar @{$exit} == 0 ) {
        @expected = (1) x scalar @execs;
        system( "auditctl -a always,exit -F arch=b$abi_bits -S exit_group "
              . "-k $key" );
    }

    foreach ( @{$exclude} ) {
        my $op  = %$_{op};
        my $exe = %$_{exe};
        if ( $op eq "=" ) {
            $expected[$exe] = 0;
        }
        else {
            for ( 0 .. $#execs ) {
                $expected[$_] = 0 if $_ != $exe;
            }
        }
        system(
"auditctl -a always,exclude -F msgtype=SYSCALL -F exe$op$execs[$exe]"
        );
    }

    # run the executables
    system("$_ > /dev/null 2> /dev/null") for (@execs);

    # make sure the records had a chance to bubble through to the logs
    system("auditctl -m syncmarker-$key");
    for ( my $i = 0 ; $i < 10 ; $i++ ) {
        if ( system("ausearch -m USER | grep -q syncmarker-$key") eq 0 ) {
            last;
        }
        sleep(0.2);
    }

    # test if we generate any audit records from the filter rule
    my $result = system("ausearch -i -k $key > $stdout 2> $stderr");
    ok( $result, 0 );

    # test if we generate the SYSCALL records correctly
    my $line;
    my @found       = (0) x scalar @execs;
    my $found_exec  = 0;
    my $found_exec2 = 0;
    seek( $fh_out, 0, 0 );
    seek( $fh_err, 0, 0 );
    while ( $line = <$fh_out> ) {

        # test if we generate a SYSCALL record
        if ( $line =~ /^type=SYSCALL / ) {
            for ( 0 .. $#execs ) {
                if ( $line =~ / exe=$execs[$_] / ) {
                    $found[$_] = 1;
                    last;
                }
            }
        }
    }
    for ( 0 .. $#execs ) {
        ok( $found[$_] == $expected[$_] );
    }
}

do_test( [ { exe => 0, op => "=" } ],  [] );
do_test( [ { exe => 1, op => "!=" } ], [] );
do_test( [],                           [ { exe => 0, op => "!=" } ] );
do_test( [],                           [ { exe => 1, op => "=" } ] );

do_test( [ { exe => 1, op => "!=" } ], [ { exe => 2, op => "=" } ] );

do_test( [ { exe => 0, op => "=" }, { exe => 1, op => "=" } ], [] );
do_test( [], [ { exe => 0, op => "=" }, { exe => 1, op => "=" } ] );

###
# cleanup

system("auditctl -D >& /dev/null");

