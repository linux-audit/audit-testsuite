#!/usr/bin/perl

use strict;

use Test;
BEGIN { plan tests => 3 }

use File::Temp qw/ tempdir tempfile /;

###
# functions

sub key_gen {
    my @chars = ( "A" .. "Z", "a" .. "z" );
    my $key = "testsuite-" . time . "-";
    $key .= $chars[ rand @chars ] for 1 .. 8;
    return $key;
}

###
# setup

# reset audit
system("auditctl -D >& /dev/null");

# create temp directory
my $dir = tempdir( TEMPLATE => '/tmp/audit-testsuite-XXXX', CLEANUP => 1 );

# create stdout/stderr sinks
( my $fh_out, my $stdout ) = tempfile(
    TEMPLATE => '/tmp/audit-testsuite-out-XXXX',
    UNLINK   => 1
);
( my $fh_err, my $stderr ) = tempfile(
    TEMPLATE => '/tmp/audit-testsuite-err-XXXX',
    UNLINK   => 1
);

###
# tests

my $result;

# audit all open() syscalls on 64-bit systems
my $key = key_gen();
$result = system("auditctl -a always,exit -F arch=b$ENV{MODE} -S open -k $key");
ok( $result, 0 );

# create a new file
( my $fh, my $filename ) =
  tempfile( TEMPLATE => $dir . "/file-XXXX", UNLINK => 1 );

# test if we generate any audit records
$result = system("ausearch -i -k $key > $stdout 2> $stderr");
ok( $result, 0 );

# test if we generate the SYSCALL record correctly
my $line;
my $found_syscall = 0;
my $found_parent  = 0;
my $found_create  = 0;
while ( $line = <$fh_out> ) {

    # test if we generate a SYSCALL record
    if ( $line =~ /^type=SYSCALL /
        and ( $line =~ / syscall=open / or $line =~ / syscall=openat / ) )
    {
        $found_syscall = 1;
    }
}
ok($found_syscall);

###
# cleanup

system("auditctl -D >& /dev/null");

