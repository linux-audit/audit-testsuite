#!/bin/bash

#
# code syntax checking tool
#
# Copyright (c) 2013,2015 Red Hat <pmoore@redhat.com>
# Author: Paul Moore <paul@paul-moore.com>
#

#
# This library is free software; you can redistribute it and/or modify it
# under the terms of version 2.1 of the GNU Lesser General Public License as
# published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, see <http://www.gnu.org/licenses>.
#

CHK_C_LIST="$(find tests/ -name "*.c") $(find tests/ -name "*.h")"
CHK_C_EXCLUDE=""

CHK_PERL_LIST="$(find tests/ -name "*.pl") $(find tests/ -name "test")"
CHK_PERL_EXCLUDE=""

CHK_PYTHON_LIST="$(find . -name "*.py")"
CHK_PYTHON_EXCLUDE=""

####
# functions

#
# Dependency verification
#
# Arguments:
#     1    Dependency to check for
#
function verify_deps() {
	[[ -z "$1" ]] && return
	if ! which "$1" >& /dev/null; then
		echo "error: install \"$1\" and include it in your \$PATH"
		exit 1
	fi
}

#
# Print out script usage details
#
function usage() {
cat << EOF
usage: check-syntax [-h] [<files>]

code syntax checking tool
optional arguments:
  -h             show this help message and exit
  -f             fix the file formatting
EOF
}

#
# Generate a properly formatted C source/header file
# $1 - source file
#
function tool_c_style() {
	astyle --options=none --lineend=linux --mode=c \
		--style=linux \
		--indent=force-tab=8 \
		--indent-preprocessor \
		--indent-col1-comments \
		--min-conditional-indent=0 \
		--max-instatement-indent=80 \
		--pad-oper \
		--align-pointer=name \
		--align-reference=name \
		--max-code-length=80 \
		--break-after-logical < "$1"
}

#
# Generate a properly formatted Perl source file
# $1 - source file
#
function tool_perl_style() {
	perltidy < "$1"
}

#
# Generate a properly formatted Python source file
# $1 - source file
#
function tool_python_style() {
	yapf --style=pep8 < "$1"
}

#
# Check the formatting on a file
# $1 - language
# $2 - file to check
#
function style_check() {
	[[ -z "$1" ]] && return
	[[ -z "$2" || ! -r "$2" ]] && return

	case "$1" in
	c|C)
		tool_c_style "$2" | \
			diff -pu --label="$2.orig" "$2" --label="$2" -
		;;
	perl|Perl)
		tool_perl_style "$2" | \
			diff -pu --label="$2.orig" "$2" --label="$2" -
		;;
	python|Python)
		tool_python_style "$2" | \
			diff -pu --label="$2.orig" "$2" --label="$2" -
		;;
	esac
}

#
# Fix the formatting on a file
# $1 - language
# $2 - file to fix
#
function style_fix() {
	[[ -z "$1" ]] && return
	[[ -z "$2" || ! -w "$2" ]] && return

	tmp="$(mktemp --tmpdir=$(dirname "$2"))"
	case "$1" in
	c|C)
		tool_c_style "$2" > "$tmp"
		;;
	perl|Perl)
		tool_perl_style "$2" > "$tmp"
		;;
	python|Python)
		tool_python_style "$2" > "$tmp"
		;;
	esac
	cat "$tmp" > "$2"
	rm "$tmp"
}

#
# Identify the file types
# $1 - file to check (optional)
#
function identify() {
	local type;

	[[ $# -eq 0 ]] && return

	# only operate on the files that have been passed as arguments
	CHK_C_LIST=""
	CHK_PERL_LIST=""
	CHK_PYTHON_LIST=""

	# try to identify the files and assign them to lists
	for i in $*; do
		type="$(file $i | cut -d':' -f 2-)"
		if echo $type | grep -q "C source"; then
			CHK_C_LIST="$CHK_C_LIST $i"
		elif echo $type | grep -q "Perl script"; then
			CHK_PERL_LIST="$CHK_PERL_LIST $i"
		elif echo $type | grep -q "Python script"; then
			CHK_PYTHON_LIST="$CHK_PYTHON_LIST $i"
		fi
	done
}

#
# Perform all known syntax checks for the configured files
#
function check() {
	for i in $CHK_C_LIST; do
		echo "$CHK_C_EXCLUDE" | grep -q "$i" && continue
		echo "Differences for $i"
		style_check c "$i"
	done

	for i in $CHK_PERL_LIST; do
		echo "$CHK_PERL_EXCLUDE" | grep -q "$i" && continue
		echo "Differences for $i"
		style_check perl "$i"
	done

	for i in $CHK_PYTHON_LIST; do
		echo "$CHK_PYTHON_EXCLUDE" | grep -q "$i" && continue
		echo "Differences for $i"
		style_check python "$i"
	done
}

#
# Perform all known syntax fixes for the configured files
#
function fix() {
	for i in $CHK_C_LIST; do
		echo "$CHK_C_EXCLUDE" | grep -q "$i" && continue
		echo "Fixing $i"
		style_fix c "$i"
	done

	for i in $CHK_PERL_LIST; do
		echo "$CHK_PERL_EXCLUDE" | grep -q "$i" && continue
		echo "Fixing $i"
		style_fix perl "$i"
	done

	for i in $CHK_PYTHON_LIST; do
		echo "$CHK_PYTHON_EXCLUDE" | grep -q "$i" && continue
		echo "Fixing $i"
		style_fix python "$i"
	done
}

####
# main

verify_deps file
verify_deps astyle
verify_deps perltidy
verify_deps yapf

opt_fix=0

# command line parameters
while getopts "fh" opt; do
	case $opt in
	f)
		opt_fix=1
		;;
	h|*)
		usage
		exit 1
		;;
	esac
done
shift $(($OPTIND - 1))
opt_files=$*

# identify any files passed via the command line
identify $opt_files

# process the files
echo "=============== $(date) ==============="
echo "Code Syntax Check Results (\"check-syntax $*\")"
if [[ $opt_fix -eq 1 ]]; then
	fix
else
	check
fi
echo "============================================================"

# exit
exit 0
